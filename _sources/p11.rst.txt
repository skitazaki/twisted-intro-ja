============================
パート11: 詩が提供されました
============================

Twisted の詩のサーバ
--------------------
Twisted を使ってクライアントを実装することに関してはたくさんのことを学んできましたので、同じように、サーバを再実装することに目を向けてみましょう。
Twisted の抽象化が汎用性である恩恵によって、必要なことは既に身に着いていることが分かるでしょう。
`twisted-server-1/fastpoetry.py`_ にある Twisted による詩のサーバに目を通してみてください。
このサーバは何の遅延もなくできる限り素早く詩を送り出しますので ``fastpoetry`` と呼ぶことにしましょう。
クライアントのコードより遥かに少ない記述量ですね。

.. _twisted-server-1/fastpoetry.py: http://github.com/jdavisp3/twisted-intro/blob/master/twisted-server-1/fastpoetry.py#L1

部分部分に分けて取り上げていくことにしましょう。まずは ``PoetryProtocol`` です。 ::

    class PoetryProtocol(Protocol):

        def connectionMade(self):
            self.transport.write(self.factory.poem)
            self.transport.loseConnection()

クライアントと同じように、サーバも接続を管理する (ここでは、クライアントからサーバへの接続です) ために ``Protocol`` インスタンスを使います。
ここでの ``Protocol`` は、詩のプロトコルにおけるサーバ側を実装しています。
私たちが使う接続プロトコルは厳密に片方向ですので、サーバの ``Protocol`` インスタンスはデータを送るときにだけ接続されます。
私たちが使う接続プロトコルは、接続が確立されるとすぐにサーバが詩を送り始めますので、 `connectionMade`_ メソッドを実装します。
これは ``Protocol`` インスタンスが ``Transport`` につながった後に呼び出されるコールバックです。

.. _connectionMade: http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L351

私たちのメソッドは ``Transport`` に二つのことをするように伝えます。
詩の文章すべてを送ること (`self.transport.write`_) と、接続を閉じること (`self.transport.loseConnection`_) です。
もちろん、どちらの操作も非同期です。
``write()`` の呼び出しは実際は「いつかはすべてのデータをクライアントに送る」ことで、 ``loseConnection()`` の呼び出しは「書き込むようにお願いしておいた全てのデータを書き終えたら接続を閉じる」ことを意味します。

.. _self.transport.write: http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1302
.. _self.transport.loseConnection: http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1321

お分かりのように、 ``Protocol`` は ``Factory`` から詩のテキストを受け取ります。
その部分を見てみましょう。 ::

    class PoetryFactory(ServerFactory):

        protocol = PoetryProtocol

        def __init__(self, poem):
            self.poem = poem

随分単純になりましたね。
ここでのファクトリーの実際の仕事は、要求に合わせて ``PoetryProtocol`` インスタンスを生成することを除くと、それぞれの ``PoetryClient`` がクライアントに送り出す詩を保存しておくことだけです。

``ClientFactory`` ではなく `ServerFactory`_ をサブクラス化していることに注意してください。
能動的に接続しにいくのではなく、サーバは受動的に接続を待ち受けますので、 `ClientFactory`_  が提供する以上のメソッドは必要ありません。
どうやってそれを確認できるのでしょうか？
私たちは `listenTCP`_ という reactor のメソッドを使っていて、そのメソッドにおけるドキュメントでは ``factory`` 引数は ``ServerFactory`` のインスタンスであるべきだと述べているのです。

.. _ServerFactory: http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L317
.. _ClientFactory: http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103
.. _listenTCP: http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L224

``listenTCP`` を呼び出す ``main`` 関数はこのようになります。 ::

    def main():
        options, poetry_file = parse_args()

        poem = open(poetry_file).read()

        factory = PoetryFactory(poem)

        from twisted.internet import reactor

        port = reactor.listenTCP(options.port or 0, factory,
                                 interface=options.iface)

        print 'Serving %s on %s.' % (poetry_file, port.getHost())

        reactor.run()

これは基本的に次の３つのことを行います。

1. 提供する詩のテキストを読み込みます。
2. 提供する詩に対する ``PoetryFactory`` を生成します。
3. 指定されたポートで接続を待ち受けるよう Twisted に伝えるために  ``listenTCP`` を使い、新しい接続に対するプロトコルのインスタンスを生成するためには我々が定義したファクトリを使います。

さて、残るは reactor にループの開始を伝えることだけです。
このサーバをテストするためには、これまで登場したあらゆる詩のクライアント (あるいは単に ``netcat``) を利用できます。

議論
----
パート５の":ref:`figure8`"と":ref:`figure9`"を思い出してください。
これらの図は、Twisted が接続したときに、新しい ``Protocol`` インスタンスがどのように生成および初期化されるかを描き出しています。
待ち受けポートへの接続と同じ機構が使われていることが分かります。
これこそが ``connectTCP`` と ``listenTCP`` の両方ともが ``factory`` 引数を必要とする理由です。

":ref:`figure9`"で見えなかったことのひとつは、 ``connectionMade`` コールバックも ``Protocol`` の初期化中に呼び出されることです。
何が起ころうともこれは実行されますが、クライアントコードでは私たちがそれを使うことはありませんでした。
また、私たちがクライアントコードで使用した ``Protocol`` メソッドは、サーバの実装では使われていません。
もしも私たちがやりたければ、クライアントとサーバの両方で動作する単一の ``PoetryProtocol`` がある共有ライブラリを作成することもできるでしょう。
実際にこれが Twisted における典型的なやり方です。
例えば `NetstringReceiver`_ プロトコルは、 ``Transport`` から `netstrings`_ を読むことも書くこともできます。

.. _NetstringReceiver: http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/protocols/basic.py#L31
.. _netstrings: http://en.wikipedia.org/wiki/Netstrings

サーバの低レベルなバージョンを実装することはスキップしました。
しかし、背後でどのようなことが起こっているかを考えてみましょう。
まず、 ``listenTCP`` の呼び出しは Twisted に `listening socket`_ (訳注:待ち受けソケット、と表記) を作成するよう伝えて、それをイベントループに付け足します。
待ち受けソケットにおける "event" とは、そこに読むべきデータがあることを意味するものではありません。
そうではなく、繋ぎにきているクライアントが待っていることを意味します。

.. _listening socket: http://en.wikipedia.org/wiki/Berkeley_sockets#listen.28.29

Twisted は接続要求を自動的に `accept`_ するでしょう。
このため、個別のクライアントとサーバが直接接続する新しいクライアントソケットを生成します。
このクライアントソケットはイベントループに追加されます。そこでは、決まったクライアント向けに、Twisted が新しい ``Transport`` と (``PoetryFactory`` 越しに) ``PoetryProtocol`` インスタンスを生成します。
このため、 ``Protocol`` インスタンスはクライアントソケットにいつも接続されています。待ち受けソケットではありません。

.. _accept: http://en.wikipedia.org/wiki/Berkeley_sockets#accept.28.29

ここまでのことを図にしてみると図26のようになります。

.. _figure26:

.. figure:: images/p11_server-1.png

    図２６：動いている詩のサーバ

この図には、詩のサーバに接続された３つのクライアントがあります。
それぞれの ``Transport`` はひとつのクライアントソケットを表現します。待ち受けソケットは ``select`` ループを使って、合わせて４つのファイルディスクリプタを生成します。
クライアントが切断されたとき、関連する ``Transport`` と ``PoetryProtocol`` は関係を断ち切られて回収 (garbage-collected) されます。私たちがどこかでそれらのうちのひとつへの参照を断ち切らなかったことを想像してみれば、メモリリークを防止するための慣習だと分かりますね。
一方で、私たちの詩のサーバーが延々と新しい接続を待ち続ける間は、 ``PoetryFactory`` はずっと残り続けるでしょう。
詩の美しさみたいですね。
いずれにせよ、図26は大きな枠組みの丁度良い部分を切り出しているのではないでしょうか。


提供している詩が比較的短いものならば、クライアントソケットとそれに関連する Python オブジェクトはそれほど長くは存続しません。
しかし、巨大な詩を提供していてとても忙しいサーバならば、何百何千というクライアントが同時に接続することになってしまうでしょう。
でも、それで良いのです。
Twisted には処理できる接続数の制限が組み込まれていません。
もちろん、いかなるサーバでも負荷を上げればいつかは耐え切れなくなるか、内部的な OS の制限に達してしまうこともあるでしょう。
とはいえ、高負荷のサーバにとっては、注意深い計測やテストは日常茶飯事なのです。

Twisted は待ち受けるポートの数にも制限を設けていません。
実際、単一の Twisted プロセスは何十というポートを待ち受けて、それぞれのポートで別々のサービスを提供できます (それぞれの ``listenTCP`` 呼び出しで異なるファクトリクラスを使うのです)。
そして注意深く設計されていると、複数のサービスを単一の Twisted プロセスにするか複数のプロセスにするかを、配備する段階まで先延ばしすることさえ可能になるでしょう。

私たちが実装したサーバに不足していることもいくつかあります。
まずは何といっても、問題のデバッグやネットワークの分析に役立つであろうログを出力しません。
さらに、サーバはデーモンとして実行されていませんので、不用意な ``Ctrl+C`` (あるいは、ただログアウトしたとき) で停止してしまう脆弱性があります。
こうした問題は先々のパートで修正していきますが、":doc:`p12`"では、詩を変換するもうひとつのサーバを実装してみます。

おすすめの練習問題
------------------

1. ":doc:`p02`"でクライアントを書いたように、Twisted を使わないで非同期な詩のサーバを書いてください。
   読み込みのために待ち受けソケットは監視される必要があることに注意してください。読み込み可能な待ち受けソケットとは、新しいクライアントソケットを ``accept`` できることを意味します。
2. ":doc:`p04`"でクライアントを実装したように、 ``listenTCP`` やプロトコル、トランスポート、あるいはファクトリを除いた部分の Twisted を使って、低レベルの非同期な詩のサーバを記述してください。
   自前の ``select`` ループの代わりに Twisted の reactor を使うのは構いません。
3. ``transport.write()`` を複数回呼び出すために ``callLater`` か ``LoopingCall`` を使って、Twisted の詩のサーバの高レベルバージョンを「遅いサーバ」にしてください。
   ブロッキングサーバーに対しては ``--num-bytes`` と ``--delay`` コマンドラインオプションを追加しましょう。
   クライアントが詩の全てを受け取る前に接続断になった場合を扱うことも忘れないでください。
4. 複数の詩を (異なるポートで) 提供できるように、高レベルの Twisted サーバを拡張してみましょう。
5. 同じ Twisted のプロセスで複数のサービスを提供する理由が何かありますか？そうしない理由は何でしょうか？

..
    <H2>Part 11: Your Poetry is Served
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. You can find an index to the entire series <A href="http://krondo.com/blog/?page_id=1327">here</A>.
    <H3>A Twisted Poetry Server
    Now that we've learned so much about writing clients with Twisted, let's turn around and re-implement our poetry server with Twisted too. And thanks to the generality of Twisted's abstractions, it turns out we've already learned almost everything we need to know. Take a look at our Twisted poetry server located in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-server-1/fastpoetry.py#L1"><TT>twisted-server-1/fastpoetry.py</TT></A>. It's called <TT>fastpoetry</TT> because this server sends the poetry as fast as possible, without any delays at all. Note there's significantly less code than in the client!
    Let's take the pieces of the server one at a time. First, the <CODE>PoetryProtocol</CODE>:
    class PoetryProtocol(Protocol):

        def connectionMade(self):
            self.transport.write(self.factory.poem)
            self.transport.loseConnection()
    Like the client, the server uses a <CODE>Protocol</CODE> instance to manage connections (in this case, connections that clients make to the server). Here the <CODE>Protocol</CODE> is implementing the server-side portion of our poetry protocol. Since our wire protocol is strictly one-way, the server's <CODE>Protocol</CODE> instance only needs to be concerned with sending data. If you recall, our wire protocol requires the server to start sending the poem immediately after the connection is made, so we implement the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L351"><CODE>connectionMade</CODE></A> method, a callback that is invoked after a <CODE>Protocol</CODE> instance is connected to a <CODE>Transport</CODE>.
    Our method tells the <CODE>Transport</CODE> to do two things: send the entire text of the poem (<A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1302"><CODE>self.transport.write</CODE></A>) and close the connection (<A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1321"><CODE>self.transport.loseConnection</CODE></A>). Of course, both of those operations are asynchronous. So the call to <CODE>write()</CODE> really means "eventually send all this data to the client" and the call to <CODE>loseConnection()</CODE> really means "close this connection once all the data I've asked you to write has been written".
    As you can see, the <CODE>Protocol</CODE> retrieves the text of the poem from the <CODE>Factory</CODE>, so let's look at that next:
    class PoetryFactory(ServerFactory):

        protocol = PoetryProtocol

        def __init__(self, poem):
            self.poem = poem
    Now that's pretty darn simple. Our factory's only real job, besides making <CODE>PoetryProtocol</CODE> instances on demand, is storing the poem that each <CODE>PoetryProtocol</CODE> sends to a client.
    Notice that we are sub-classing <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L317"><CODE>ServerFactory</CODE></A> instead of <CODE>ClientFactory</CODE>. Since our server is passively listening for connections instead of actively making them, we don't need the extra methods <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103"><CODE>ClientFactory</CODE></A> provides. How can we be sure of that? Because we are using the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L224"><CODE>listenTCP</CODE></A> reactor method and the documentation for that method explains that the <CODE>factory</CODE> argument should be an instance of <CODE>ServerFactory</CODE>.
    Here's the <CODE>main</CODE> function where we call <CODE>listenTCP</CODE>:
    def main():
        options, poetry_file = parse_args()

        poem = open(poetry_file).read()

        factory = PoetryFactory(poem)

        from twisted.internet import reactor

        port = reactor.listenTCP(options.port or 0, factory,
                                 interface=options.iface)

        print 'Serving %s on %s.' % (poetry_file, port.getHost())

        reactor.run()
    It basically does three things:
    <OL>
    * Read the text of the poem we are going to serve.
    * Create a <CODE>PoetryFactory</CODE> with that poem.
    * Use <CODE>listenTCP</CODE> to tell Twisted to listen for connections on a port, and use our factory to make the protocol instances for each new connection.
    </OL>
    After that, the only thing left to do is tell the <CODE>reactor</CODE> to start running the loop. You can use any of our previous poetry clients (or just <TT>netcat</TT>) to test out the server.
    <H3>Discussion
    Recall <A href="http://krondo.com/blog/?p=1522#figure8">Figure 8</A> and <A href="http://krondo.com/blog/?p=1522#figure9">Figure 9</A> from Part 5. Those figures illustrated how a new <CODE>Protocol</CODE> instance is created and initialized after Twisted makes a new connection on our behalf. It turns out the same mechanism is used when Twisted accepts a new incoming connection on a port we are listening on. That's why both <CODE>connectTCP</CODE> and <CODE>listenTCP</CODE> require <CODE>factory</CODE> arguments.
    One thing we didn't show in <A href="http://krondo.com/blog/?p=1522#figure9">Figure 9</A> is that the <CODE>connectionMade</CODE> callback is also called as part of <CODE>Protocol</CODE> initialization. This happens no matter what, but we didn't need to use it in the client code. And the <CODE>Protocol</CODE> methods that we did use in the client aren't used in the server's implementation. So if we wanted to, we could make a shared library with a single <CODE>PoetryProtocol</CODE> that works for both clients and servers. That's actually the way things are typically done in Twisted itself. For example, the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/protocols/basic.py#L31"><CODE>NetstringReceiver</CODE></A> <CODE>Protocol</CODE> can both read and write <A href="http://en.wikipedia.org/wiki/Netstrings">netstrings</A> from and to a <CODE>Transport</CODE>.
    We skipped writing a low-level version of our server, but let's think about what sort of things are going on under the hood. First, calling <CODE>listenTCP</CODE> tells Twisted to create a <A href="http://en.wikipedia.org/wiki/Berkeley_sockets#listen.28.29">listening socket</A> and add it to the event loop. An "event" on a listening socket doesn't mean there is data to read; instead it means there is a client waiting to connect to us.
    Twisted will automatically <A href="http://en.wikipedia.org/wiki/Berkeley_sockets#accept.28.29">accept</A> incoming connection requests, thus creating a new client socket that links the server directly to an individual client. That client socket is also added to the event loop, and Twisted creates a new <CODE>Transport</CODE> and (via the <CODE>PoetryFactory</CODE>) a new <CODE>PoetryProtocol</CODE> instance to service that specific client. So the <CODE>Protocol</CODE> instances are always connected to client sockets, never to the listening socket.
    We can visualize all of this in Figure 26:
    <DIV id="attachment_2073" class="wp-caption aligncenter" style="width: 610px"><A href="./part11_files/server-1.png"><IMG class="size-full wp-image-2073" title="Figure 26: the poetry server in action" src="./part11_files/server-1.png" alt="" width="600" height="385"></A><P class="wp-caption-text">Figure 26: the poetry server in action</DIV>
    In the figure there are three clients currently connected to the poetry server. Each <CODE>Transport</CODE> represents a single client socket, and the listening socket makes a total of four file descriptors for the select loop to monitor. When a client is disconnected the associated <CODE>Transport</CODE> and <CODE>PoetryProtocol</CODE> will be dereferenced and garbage-collected (assuming we haven't stashed a reference to one of them somewhere, a practice we should avoid to prevent memory leaks). The <CODE>PoetryFactory</CODE>, meanwhile, will stick around as long as we keep listening for new connections which, in our poetry server, is forever. Like the beauty of poetry. Or something. At any rate, Figure 26 certainly cuts a fine figure of a Figure, doesn't it?
    The client sockets and their associated Python objects won't live very long if the poem we are serving is relatively short. But with a large poem and a really busy poetry server we could end up with hundreds or thousands of simultaneous clients. And that's OK — Twisted has no built-in limits on the number of connections it can handle. Of course, as you increase the load on any server, at some point you will find it cannot keep up or some internal OS limit is reached. For highly-loaded servers, careful measurement and testing is the order of the day.
    Twisted also imposes no limit on the number of ports we can listen on. In fact, a single Twisted process could listen on dozens of ports and provide a different service on each one (by using a different factory class for each <CODE>listenTCP</CODE> call). And with careful design, whether you provide multiple services with a single Twisted process or several is a decision you could potentially even postpone to the deployment phase.
    There's a couple things our server is missing. First of all, it doesn't generate any logs that might help us debug problems or analyze our network traffic. Furthermore, the server doesn't run as a daemon, making it vulnerable to death by accidental <TT>Ctrl-C</TT> (or just logging out). We'll fix both those problems in a future Part but first, in <A href="http://krondo.com/blog/?p=2101">Part 12</A>, we'll write another server to perform poetry transformation.
    <H3>Suggested Exercises
    <OL>
    * Write an asynchronous poetry server without using Twisted, like we did for the client in <A href="http://krondo.com/blog/?p=1247">Part 2</A>. Note that listening sockets need to be monitored for reading and a "readable" listening socket means we can <CODE>accept</CODE> a new client socket.
    * Write a low-level asynchronous poetry server using Twisted, but without using <CODE>listenTCP</CODE> or protocols, transports, and factories, like we did for the client in <A href="http://krondo.com/blog/?p=1445">Part 4</A>. So you'll still be making your own sockets, but you can use the Twisted reactor instead of your own <CODE>select</CODE> loop.
    * Make the high-level version of the Twisted poetry server a "slow server" by using <CODE>callLater</CODE> or <CODE>LoopingCall</CODE> to make multiple calls to <CODE>transport.write()</CODE>. Add the <TT>--num-bytes</TT> and <TT>--delay</TT> command line options supported by the blocking server. Don't forget to handle the case where the client disconnects before receiving the whole poem.
    * Extend the high-level Twisted server so it can serve multiple poems (on different ports).
    * What are some reasons to serve multiple services from the same Twisted process? What are some reasons not to?
    </OL>
