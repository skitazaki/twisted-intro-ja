=======================
パート6: さらなる高みへ
=======================

みんなの詩
----------

詩のクライアントを大きく進歩させてきました。最新のバージョン (2.0) は Transports と Protocols、それに Protocol Factories という Twisted ネットワーキングの中でも核となる部分を使っています。しかし、またまだ改良の余地はあります。クライアント 2.0 (2.1 もそうです) はコマンドラインで詩をダウンロードすることにしか使えません。 ``PoetryClientFactory`` が詩を取得するだけでなく、それが終わったときにプログラムを終了させることも受け持っているからです。"``PoetryClientFactory``" と呼ばれるものには不釣り合いな仕事であり、 ``PoetryProtocol`` を生成してダウンロード済みの詩をまとめる以外の何事もすべきではありません。

まずは、詩を要求するコードに詩を送る方法が必要です。同期プログラムでは、こんな感じの API にするでしょう。
::

    def get_poetry(host, post):
        """Return the text of a poem from the poetry server at the given host and port."""

しかし当然ではありますがこんな風にはできません。上の関数では詩を完全に受け取るまでブロックする必要性があります。でないとドキュメントで述べているようには動きません。とはいえこれは reactive プログラムです。ネットワークソケットにおけるブロッキングは問題とはなりませんので。私たちには、詩が転送されている間はブロッキングすることなく、詩の準備ができたら呼び出し元のコードに知らせる方法が必要です。これは Twisted 自身に持っていて欲しい類の問題です。Twisted は私たちのコードに次のタイミングで知らせる必要があります。ソケットが入出力の準備できたとき、もしくは何らかのデータを受信したとき、それともタイムアウトが発生したとき、などなどです。Twisted がコールバックを使ってこの問題を解決してくれることを見てきました。ですから、私たちだって同じようにコールバックを使えます。
::

    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete.
        """

今は Twisted で使える非同期 API も手に入れましたので、先に進んでこれを実装してみましょう。

    以前にも述べたように、私たちは時として、一般的な Twisted プログラマーはやらないような方法でコードを書いていきます。これはそんなものの一種です。
    パート７と８で "Twisted なやり方" (なんと抽象化を使うのです！) での実装を見ることになります。しかし、簡単なことから始めると、完成形に対するより深い洞察を得られるでしょう。

クライアント 3.0
----------------
バージョン 3.0 のクライアントは `twisted-client-3/get-poetry.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py>`_ にあります。このバージョンには ``get_poetry`` `関数 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L77>`_ の実装があります。
::

    def get_poetry(host, port, callback):
        from twisted.internet import reactor
        factory = PoetryClientFactory(callback)
        reactor.connectTCP(host, port, factory)

ここで新しく着目する唯一のことは ``PoetryClientFactory`` にコールバック関数を渡していることです。 `ファクトリ <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L66>`_ は詩を提供するためにコールバックを使います。
::

    class PoetryClientFactory(ClientFactory):

        protocol = PoetryProtocol

        def __init__(self, callback):
            self.callback = callback

        def poem_finished(self, poem):
            self.callback(poem)

ファクトリは reactor を終了させる責任を負いませんので、バージョン 2.1 のものに比べてはるかに簡単になっていますね。接続に失敗したことを検知するコードもなくなっていますが、ちょっと手直しするつもりです。クライアントのバージョン 2.1 からその機能を再利用するだけですので、 ``PoetryProtocol`` 自身を変更する必要は全くありません。
::

    class PoetryProtocol(Protocol):

        poem = ''

        def dataReceived(self, data):
            self.poem += data

        def connectionLost(self, reason):
            self.poemReceived(self.poem)

        def poemReceived(self, poem):
            self.factory.poem_finished(poem)

この変更によって、 ``get_poetry`` 関数と ``PoetryClientFactory`` および ``PoetryProtocol`` クラスは完全に再利用可能なものになりました。詩をダウンロードするだけのものであり、他のことは何もしません。reactor を起動、終了させる全てのロジックは `main 関数 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L90>`_ にあります。
::

    def poetry_main():
        addresses = parse_args()

        from twisted.internet import reactor

        poems = []

        def got_poem(poem):
            poems.append(poem)
            if len(poems) == len(addresses):
                reactor.stop()

        for address in addresses:
            host, port = address
            get_poetry(host, port, got_poem)

        reactor.run()

        for poem in poems:
            print poem

要求通りに、再利用可能な部品を手にすることができ、誰もが詩を取得するために使えるように共有モジュールに配置できますね (もちろん、Twisted を使っている限り、ですけど)。

ところで、実際にクライアント 3.0 をテストしてみると、詩をより早く送信するようにしたり、より大きなデータの塊にして送信するなど、詩のサーバを再構成したくなるかもしれません。クライアントは余計な出力をしないようになりましたので、詩をダウンロードする間のことを監視してもそれほど興味深くはありません。

議論
---
図１１のように、詩が提供される時点でのコールバックチェーンを視覚化できます。

.. _figure11:

.. figure:: images/p06_reactor-poem-callback.png

    図１１：詩のコールバック

図１１には説明の必要がありますね。これまでは、「自分たちのコード」を呼び出して終了するようにコールバックチェーンを説明してきました。しかし、Twisted を使うかシングルスレッドの reactive システムのプログラムを書くときは、これらのコールバックチェーンは他の部分のコードを呼び出させるようにして私たちのコードを取り込むかもしれません。言い換えると、reactive スタイルのプログラミングは、私たち自身が記述したコードに到達しても止まりません。reactor ベースのシステムではコールバックは進んでいくだけなのです。

プロジェクトで Twisted を使うときにはこのことを念頭においてください。こう決心したときは、

    Twisted を使うぞ！

この決定もしたことになります。

    reactor ループに基づいた一連の非同期コールバックチェーンの呼び出しとしてプログラムを構築していこう！

別に声に出して宣言することでもありませんが、同じことです。それが Twisted のやり方ですから。

たいていの Python プログラムは同期して動きますし、Python のモジュールもそうです。同期プログラムを書いていればすぐに次のことに気付きます。詩を受け取るために必要なのは、同期バージョンの ``get_poetry`` 関数に以下の数行のコードを追加して使うことでしょう。
::

    ...
    import poetrylib # モジュールに名前を付けました (I just made this module name up)
    poem = poetrylib.get_poetry(host, port)
    ...

それでは私たちのやり方を続けていきましょう。後になってもしも、実は詩を欲しくなんてなかった、と思ったらこの数行を取り除けばよいだけです。困ることもないでしょう。しかし、同期プログラムを書いていて ``get_poetry`` の Twisted バージョンを使うと決めたなら、プログラムをコールバックを使った非同期なスタイルで再構築しなくてはならなくなります。おそらくコードに大きな変更をしなくてはいけないでしょう。プログラムを書き直すような間違いが必要だと言っているわけではありません。要件が与えられれば意味のあることでしょう。しかし、 ``import`` の行といくつかの関数呼び出しを追加するほどには簡単ではないでしょう。同期と非同期のコードは混在させられません。

Twisted と非同期プログラミングに慣れていないなら、既存のコードベースを移植する前にスクラッチから Twisted のプログラムをいくつか書いてみることをお勧めします。移植しながら一度に両方のモードで考えようとする余計な複雑さがなくなり、Twisted を使うことにも安心できるでしょう。

    けれども、あなたのプログラムがすでに非同期なら、Twisted を使うことははるかに簡単かもしれません。
    Twisted は比較的スムーズに `pyGTK <http://pygtk.org/>`_ と `pyQT <http://wiki.python.org/moin/PyQt>`_ に繋げられます。
    これらは reactor ベースの GUI ツールキットのための Python API です。

おかしくなってしまうとき
------------------------
クライアント 3.0 では、接続に失敗したことを検出しなくなりました。クライアント 1.0 で省略したときよりもいくぶんの問題を引き起こすようになりました。クライアント 3.0 に存在しないサーバから詩をダウンロードさせてみると、クラッシュすることなく永遠に待ち続けます。それでも ``clientConnectionFailed`` コールバックは呼び出されますので、基底クラス `ClientFactory <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103>`_ にある標準実装は全く何もしません。このため、 ``get_poem`` コールバックが呼ばれることはありませんし、reactor は止まりません。":doc:`p02`"で作ったような何もしないプログラムになります。

明らかにこのエラーをなんとかする必要があります。どこで？接続に失敗したという情報は ``clientConnectionFailed`` を介してファクトリ・オブジェクトにもたらされます。ということで、そこから始めることになります。しかし、このファクトリは再利用可能なものと考えられていますし、エラーを処理する適切な方法は、ファクトリが利用されるコンテキストに依存します。いくつかのアプリケーションでは、詩を見失ってしまうと甚大な被害になるかもしれません (詩が無いって？クラッシュみたいなものかもね)。他の場合では、そのまま動作を続けてどこか違うところからもう一つの詩を受け取るようにするかもしれません。

言い換えると、 ``get_poetry`` のユーザは、正常に動いているときではなく、おかしくなってしまったときを知る必要があるのです。同期プログラムでは、 ``get_poetry`` が ``Exception`` を発生させ、呼び出すコードはそれを ``try/except`` 構文で処理できるようにするでしょう。しかし、reactive プログラムでは、エラー状態も非同期にもたらされます。 ``get_poetry`` 関数が処理を返す後まで、私たちは接続に失敗したことさえ分からないのです。

一つの可能性を見せましょう。
::

    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(None)

        instead.
        """

コールバックの引数をテストする (つまり ``if poem is None`` ) ことによって、クライアントは私たちが詩を受け取ったかどうかを確定できます。クライアントが延々と実行し続けることは避けられますが、この方法にはまだいくつかの問題点があります。何よりもまず、失敗を示すのに ``None`` を使うのはその場しのぎ過ぎます。次に、 ``None`` という値では非常に限定された情報しか渡せません。何が悪かったのか分かりません。ここでは、デバッグに使えるようにトレースバック・オブジェクトを含めてあげましょう。では二つ目です。
::

    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(err)

        instead, where err is an Exception instance.
        """

``Exception`` を使うと同期プログラミングで使ったものに近くなりますね。これで何が悪かったかは例外を見ればよくなり、 ``None`` を通常の値としても使えるようになります。通常は、Python で例外に出会ったときはトレースバックも取得し、後でデバッグするために解析したりログに書き出したりします。トレースバックは本当に便利です。非同期プログラミングだからといって諦めるべきではありません。

コールバックが呼び出された場所で出力するためにトレースバック・オブジェクトを必要としているわけではありませんよ。そこは問題が起こった場所ではありません。私たちが本当に欲しいのは、 ``Exception`` インスタンスとその例外が送出された場所からのコールバックの両方です (単に生成された場所ではなく、送出された場所です)。

Twisted には ``Exception`` とトレースバックの両方を包括する `Failure <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L121>`_ という抽象化があります。 ``Failure`` の `docstring <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L141>`_ で作り方を説明しています。 ``Failure`` オブジェクトをコールバックに渡すことで、デバッグに便利なトレースバック情報を保存できます。

`twisted-failure/failure-examples.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-failure/failure-examples.py>`_ には ``Failure`` オブジェクトを使うコード例がいくつかあります。これを見れば、 ``Failure`` が送出された例外からのトレースバック情報を保存する方法が分かるでしょう。たとえ ``except`` ブロックの外側のコンテキストだったとしてもです。 ``Failure`` インスタンスを作ることに多くを語る気はありません。パート７では、Twisted がそれを生成してくれるのが分かるでしょう。

それでは三つ目です。
::

    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(err)

        instead, where err is a twisted.python.failure.Failure instance.
        """

このバージョンでは、うまく動かないときには ``Exception`` とトレースバックの両方を取得できます。いいですね！

もう一息のところですが、もうひとつ問題点があります。通常の結果と失敗の両方に対して同じコールバックを使うのはちょっと変ですね。一般的に、失敗に対しては成功に対する場合と全く異なる対処が必要です。同期版の Python プログラムでは ``try/catch`` の中で成功と失敗を異なるコードで扱います。こんな風に。
::

    try:
        attempt_to_do_something_with_poetry()
    except RhymeSchemeViolation:
        # the code path when things go wrong
    else:
        # the code path when things go so, so right baby

エラー処理でこの形式を保ちたいなら、失敗に対しては分離したコードの進み方にさせる必要があります。非同期プログラミングでは、コードの進み方が分離されていることはコールバックが分離されていることを意味します。
::

    def get_poetry(host, port, callback, errback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          errback(err)

        instead, where err is a twisted.python.failure.Failure instance.
        """

クライアント 3.1
----------------
今度は妥当なエラー処理の意味を持つ API を使えますので、あとはそれを実装します。クライアント 3.1 は `twisted-client-3/get-poetry-1.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py>`_ にあります。変更点はここまでの内容そのままです。 `PoetryClientFactory <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L66>`_ は ``callback`` と ``errback`` の両方を受け取り、  ``clientConnectionFailed`` を実装します。
::

    class PoetryClientFactory(ClientFactory):

        protocol = PoetryProtocol

        def __init__(self, callback, errback):
            self.callback = callback
            self.errback = errback

        def poem_finished(self, poem):
            self.callback(poem)

        def clientConnectionFailed(self, connector, reason):
            self.errback(reason)

`clientConnectionFailed <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L118>`_ は接続に失敗した理由を説明する ``Failure`` オブジェクト (``reason`` 引数) を受け取るようにすでになっていますので、 ``errback`` に渡すだけです。

他の変更はすべて小さなものなので、ここでは示しません。クライアント 3.1 は次のようにサーバ名を付けずにポート番号を指定してテストできます。
::

    python twisted-client-3/get-poetry-1.py 10004

次のような結果を目にするでしょう。
::

    Poem failed: [Failure instance: Traceback (failure with no frames): :
     Connection was refused by other side: 111: Connection refused.]

`poem_failed <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L110>`_ の ``print`` 文からの出力です。Twisted は ``Exception`` を送出するのではなく、単に渡すだけです。このため、ここではトレースバックはありません。しかし、巨大ではないからトレースバックは実際には必要とされません。Twisted は私たちに知らせてくれただけです。正確に、そのアドレスには接続できない、と

まとめ
------
パート６で学んだのは次のことです。

* Twisted プログラムのために書いた API は非同期でなくてはなりません。
* 非同期なコードに同期のコードを混ぜることはできません。
* したがって、私たち自身のコードでもコールバックを使わなくてはなりません。Twisted がそうしているように。
* そして、エラーを処理するのもコールバックでなくてはなりません。

Twisted を使って記述するどの API においても、追加で二つの引数、通常のコールバックとエラー用のコールバック、を含めなくてはならないのでしょうか？そんなに良いことには思えません。幸運にも Twisted は、私たちがどちらも使わなくても済み、おまけに追加でいくつかの機能を持たせてくれる抽象化を持ちます。これについては":doc:`p07`"で学んでいきましょう。


おすすめの練習問題
------------------
#. 指定された時間が経過しても詩を受信しなければタイムアウトするようにクライアント 3.1 を修正しましょう。このような場合は独自の例外でエラー用コールバックを呼び出してください。接続を閉じるのも忘れないように。
#. ``Failure`` オブジェクトの `trap <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L278>`_ メソッドを学習してください。
   ``trap`` と ``try/except`` 文の ``except`` 節を比べてください。
#. ``clientConnectionFailed`` は ``get_poetry`` が処理を返した後に呼ばれていることを検証するために ``print`` 文を使ってください。

..
    <H2>Part 6: And Then We Took It Higher
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. You can find an index to the entire series <A href="http://krondo.com/blog/?page_id=1327">here</A>.
    <H3>Poetry for Everyone
    We've made a lot of progress with our poetry client. Our last version (2.0) is using Transports, Protocols, and Protocol Factories, the workhorses of Twisted networking. But there are more improvements to make. Client 2.0 (and also 2.1) can only be used for downloading poetry at the command line. This is because the <CODE>PoetryClientFactory</CODE> is not only in charge of getting poetry, but also in charge of shutting down the program when it's finished. That's an odd job for something called "<CODE>PoetryClientFactory</CODE>", it really ought to do nothing beyond making <CODE>PoetryProtocol</CODE>s and collecting finished poems.
    We need a way to send a poem to the code that requested the poem in the first place. In a synchronous program we might make an API like this:
    def get_poetry(host, post):
        """Return the text of a poem from the poetry server at the given host and port."""
    But of course, we can't do that here. The above function necessarily blocks until the poem is received in entirety, otherwise it couldn't work the way the documentation claims. But this is a reactive program so blocking on a network socket is out of the question. We need a way to tell the calling code when the poem is ready, without blocking while the poem is in transit. But this is the same sort of problem that Twisted itself has. Twisted needs to tell our code when a socket is ready for I/O, or when some data has been received, or when a timeout has occurred, etc. We've seen that Twisted solves this problem using callbacks, so we can use callbacks too:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete.
        """
    Now we have an asynchronous API we can use with Twisted, so let's go ahead and implement it.
    <P style="padding-left: 30px;">As I said before, we will at times be writing code in ways a typical Twisted programmer wouldn't. This is one of those times and one of those ways. We'll see in Parts 7 and 8 how to do this the "Twisted way" (surprise, it uses an abstraction!) but starting out simply will give us more insight into the finished version.
    <H3>Client 3.0
    You can find version 3.0 of our poetry client in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py"><TT>twisted-client-3/get-poetry.py</TT></A>. This version has an implementation of the <CODE>get_poetry</CODE> <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L77">function</A>:
    def get_poetry(host, port, callback):
        from twisted.internet import reactor
        factory = PoetryClientFactory(callback)
        reactor.connectTCP(host, port, factory)
    The only new wrinkle here is passing the callback function to the <CODE>PoetryClientFactory</CODE>. The <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L66">factory</A> uses the callback to deliver the poem:
    class PoetryClientFactory(ClientFactory):

        protocol = PoetryProtocol

        def __init__(self, callback):
            self.callback = callback

        def poem_finished(self, poem):
            self.callback(poem)
    Notice the factory is much simpler than in version 2.1 since it's no longer in charge of shutting the reactor down. It's also missing the code for detecting failures to connect, but we'll fix that in a little bit. The <CODE>PoetryProtocol</CODE> itself doesn't need to change at all so we just re-use the one from client 2.1:
    class PoetryProtocol(Protocol):

        poem = ''

        def dataReceived(self, data):
            self.poem += data

        def connectionLost(self, reason):
            self.poemReceived(self.poem)

        def poemReceived(self, poem):
            self.factory.poem_finished(poem)
    With this change, the <CODE>get_poetry</CODE> function, and the <CODE>PoetryClientFactory</CODE> and <CODE>PoetryProtocol</CODE> classes, are now completely re-usable. They are all about downloading poetry and nothing else. All the logic for starting up and shutting down the reactor is in the <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L90">main function</A> of our script:
    def poetry_main():
        addresses = parse_args()

        from twisted.internet import reactor

        poems = []

        def got_poem(poem):
            poems.append(poem)
            if len(poems) == len(addresses):
                reactor.stop()

        for address in addresses:
            host, port = address
            get_poetry(host, port, got_poem)

        reactor.run()

        for poem in poems:
            print poem
    So if we wanted, we could take the re-usable parts and put them in a shared module that anyone could use to get their poetry (as long as they were using Twisted, of course).
    By the way, when you're actually testing client 3.0 you might re-configure the poetry servers to send the poetry faster or in bigger chunks. Now that the client is less chatty in terms of output it's not as interesting to watch while it downloads the poems.
    <H3>Discussion
    We can visualize the callback chain at the point when a poem is delivered in Figure 11:<A name="figure11"></A>
    <DIV id="attachment_1618" class="wp-caption aligncenter" style="width: 374px"><A href="./part6_files/reactor-poem-callback.png"><IMG class="size-full wp-image-1618" title="Figure 11: the poem callbacks" src="./part6_files/reactor-poem-callback.png" alt="Figure 11: the poem callbacks" width="364" height="385"></A><P class="wp-caption-text">Figure 11: the poem callbacks</DIV>
    Figure 11 is worth contemplating. Up until now we have depicted callback chains that terminate with a single call to "our code". But when you are programming with Twisted, or any single-threaded reactive system, these callback chains might well include bits of our code making callbacks to other bits of our code. In other words, the reactive style of programming doesn't stop when it reaches code we write ourselves. In a reactor-based system, it's callbacks all the way down.
    Keep that fact in mind when choosing Twisted for a project. When you make this decision:
    <BLOCKQUOTE>I'm going to use Twisted!</BLOCKQUOTE>
    You are also making this decision:
    <BLOCKQUOTE>I'm going to structure my program as a series of asynchronous callback chain invocations powered by a reactor loop!</BLOCKQUOTE>
    Now maybe you won't exclaim it out loud the way I do, but it is nevertheless the case. That's how Twisted works.
    It's likely that most Python programs are synchronous and most Python modules are synchronous too. If we were writing a synchronous program and suddenly realized it needed some poetry, we might use the synchronous version of our <CODE>get_poetry</CODE> function by adding a few lines of code to our script like these:
    ...
    import poetrylib # I just made this module name up
    poem = poetrylib.get_poetry(host, port)
    ...
    And continue on our way. If, later on, we decided we didn't really want that poem after all then we'd just snip out those lines and no one would be the wiser. But if we were writing a synchronous program and then decided to use the Twisted version of <CODE>get_poetry</CODE>, we would need to re-architect our program in the asynchronous style using callbacks. We would probably have to make significant changes to the code. Now, I'm not saying it would necessarily be a mistake to rewrite the program. It might very well make sense to do so given our requirements. But it won't be as simple as adding an <CODE>import</CODE> line and an extra function call. Simply put, synchronous and asynchronous code do not mix.
    If you are new to Twisted and asynchronous programming, I might recommend writing a few Twisted programs from scratch before you attempt to port an existing codebase. That way you will get a feel for using Twisted without the extra complexity of trying to think in both modes at once as you port from one to the other.
    <P style="padding-left: 30px;">If, however, your program is already asynchronous then using Twisted might be much easier. Twisted integrates relatively smoothly with <A href="http://pygtk.org/">pyGTK</A> and <A href="http://wiki.python.org/moin/PyQt">pyQT</A>, the Python APIs for two reactor-based GUI toolkits.
    <H3>When Things Go Wrong
    In client 3.0 we no longer detect a failure to connect to a poetry server, an omission which causes even more problems than it did in client 1.0. If we tell client 3.0 to download a poem from a non-existent server then instead of crashing it just waits there forever. The <CODE>clientConnectionFailed</CODE> callback still gets called, but the default implementation in the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103"><CODE>ClientFactory</CODE></A> base class doesn't do anything at all. So the <CODE>got_poem</CODE> callback is never called, the reactor is never stopped, and we've got another do-nothing program like the ones we made in <A href="http://krondo.com/blog/?p=1247">Part 2</A>.
    Clearly we need to handle this error, but where? The information about the failure to connect is delivered to the factory object via <CODE>clientConnectionFailed</CODE> so we'll have to start there. But this factory is supposed to be re-usable, and the proper way to handle an error will depend on the context in which the factory is being used. In some applications, missing poetry might be a disaster (No poetry?? Might as well just crash). In others, maybe we just keep on going and try to get another poem from somewhere else.
    In other words, the users of <CODE>get_poetry</CODE> need to know when things go wrong, not just when they go right. In a synchronous program, <CODE>get_poetry</CODE> would raise an <CODE>Exception</CODE> and the calling code could handle it with a <CODE>try</CODE>/<CODE>except</CODE> statement. But in a reactive program, error conditions have to be delivered asynchronously, too. After all, we won't even find out the connection failed until after <CODE>get_poetry</CODE> returns. Here's one possibility:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(None)

        instead.
        """
    By testing the callback argument (i.e., <CODE>if poem is None</CODE>) the client can determine whether we actually got a poem or not. This would suffice for our client to avoid running forever, but that approach still has some problems. First of all, using <CODE>None</CODE> to indicate failure is somewhat ad-hoc. Some asynchronous APIs might want to use <CODE>None</CODE> as a default return value instead of an error condition. Second, a <CODE>None</CODE> value carries a very limited amount of information. It can't tell us what went wrong, or include a traceback object we can use in debugging. Ok, second try:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(err)

        instead, where err is an Exception instance.
        """
    Using an <CODE>Exception</CODE> is closer to what we are used to with synchronous programming. Now we can look at the exception to get more information about what went wrong and <CODE>None</CODE> is free for use as a regular value. Normally, though, when we encounter an exception in Python we also get a traceback we can analyze or print to a log for debugging at some later date. Tracebacks are extremely useful so we shouldn't give them up just because we are using asynchronous programming.
    Keep in mind we don't want a traceback object for the point where our callback is invoked, that's not where the problem happened. What we really want is both the <CODE>Exception</CODE> instance and the traceback from the point where that exception was raised (assuming it was raised and not simply created).
    Twisted includes an abstraction called a <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L121"><CODE>Failure</CODE></A> that wraps up both an <CODE>Exception</CODE> and the traceback, if any, that went with it. The <CODE>Failure</CODE> <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L141">docstring</A> explains how to create one. By passing <CODE>Failure</CODE> objects to callbacks we can preserve the traceback information that's so handy for debugging.
    There is some example code that uses <CODE>Failure</CODE> objects in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-failure/failure-examples.py"><TT>twisted-failure/failure-examples.py</TT></A>. It shows how <CODE>Failure</CODE>s can preserve the traceback information from a raised exception, even outside the context of an <CODE>except</CODE> block. We won't dwell too much on making <CODE>Failure</CODE> instances. In Part 7 we'll see that Twisted generally ends up making them for us.
    Alright, third try:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(err)

        instead, where err is a twisted.python.failure.Failure instance.
        """
    With this version we get both an <CODE>Exception</CODE> and possibly a traceback record when things go wrong. Nice.
    We're almost there, but we've got one more problem. Using the same callback for both normal results and failures is kind of odd. In general, we need to do quite different things on failure than on success. In a synchronous Python program we generally handle success and failure with two different code paths in a <CODE>try</CODE>/<CODE>except</CODE> statement like this:
    try:
        attempt_to_do_something_with_poetry()
    except RhymeSchemeViolation:
        # the code path when things go wrong
    else:
        # the code path when things go so, so right baby
    If we want to preserve this style of error-handling, then we need to use a separate code path for failures. In asynchronous programming a separate code path means a separate callback:
    def get_poetry(host, port, callback, errback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          errback(err)

        instead, where err is a twisted.python.failure.Failure instance.
        """
    <H3>Client 3.1
    Now that we have an API with reasonable error-handling semantics we can implement it. Client 3.1 is located in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py"><CODE>twisted-client-3/get-poetry-1.py</CODE></A>. The changes are pretty straightforward. The <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L66"><CODE>PoetryClientFactory</CODE></A> gets both a <CODE>callback</CODE> and an <CODE>errback</CODE>, and now it implements <CODE>clientConnectionFailed</CODE>:
    class PoetryClientFactory(ClientFactory):

        protocol = PoetryProtocol

        def __init__(self, callback, errback):
            self.callback = callback
            self.errback = errback

        def poem_finished(self, poem):
            self.callback(poem)

        def clientConnectionFailed(self, connector, reason):
            self.errback(reason)
    Since <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L118"><CODE>clientConnectionFailed</CODE></A> already receives a <CODE>Failure</CODE> object (the <CODE>reason</CODE> argument) that explains why the connection failed, we just pass that along to the <CODE>errback</CODE>.
    The other changes are all of a piece so I won't bother posting them here. You can test client 3.1 by using a port with no server like this:
    python twisted-client-3/get-poetry-1.py 10004
    And you'll get some output like this:
    Poem failed: [Failure instance: Traceback (failure with no frames): : Connection was refused by other side: 111: Connection refused.
    ]
    That's from the <CODE>print</CODE> statement in our <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L110"><CODE>poem_failed</CODE></A> errback. In this case, Twisted has simply passed us an <CODE>Exception</CODE> rather than raising it, so we don't get a traceback here. But a traceback isn't really needed since this isn't a bug, it's just Twisted informing us, correctly, that we can't connect to that address.
    <H3>Summary
    Here's what we've learned in Part 6:
    <UL>
    * The APIs we write for Twisted programs will have to be asynchronous.
    * We can't mix synchronous code with asynchronous code.
    * Thus, we have to use callbacks in our own code, just like Twisted does.
    * And we have to handle errors with callbacks, too.
    </UL>
    Does that mean every API we write with Twisted has to include two extra arguments, a callback and an errback? That doesn't sound so nice. Fortunately, Twisted has an abstraction we can use to eliminate both those arguments and pick up a few extra features in the bargain. We'll learn about it in <A href="http://krondo.com/blog/?p=1682">Part 7</A>.
    <H3>Suggested Exercises
    <OL>
    * Update client 3.1 to timeout if the poem isn't received after a given period of time. Invoke the errback with a custom exception in that case. Don't forget to close the connection when you do.
    * Study the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L278"><CODE>trap</CODE></A> method on <CODE>Failure</CODE> objects. Compare it to the <CODE>except</CODE> clause in the <CODE>try</CODE>/<CODE>except</CODE> statement.
    * Use <CODE>print</CODE> statements to verify that <CODE>clientConnectionFailed</CODE> is called after <CODE>get_poetry</CODE> returns.
    </OL>
